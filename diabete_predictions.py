# -*- coding: utf-8 -*-
"""Diabete Predictions.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MWtEqXZYAiLXNxKSfVZnsquHJ5sNTpA9

Import the Libraries
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data collection and Analysis"""

# Loading the data set
diabates_dataset = pd.read_csv("./Data/diabetes.csv")

# Read number of rows and column
diabates_dataset.shape

# Print specific charateristics of the dataset
diabates_dataset.describe()

# Show First 5 rows of your dataset
diabates_dataset.head()

# Check the number of lables
diabates_dataset['Outcome'].value_counts()

"""0 ---> No Diabatic
1 ---> Diabetic
"""

diabates_dataset.groupby('Outcome').mean()

# Separate data and Label

X = diabates_dataset.drop(columns="Outcome", axis=1)
Y = diabates_dataset["Outcome"]
print(X)
print(Y)

"""Data Standardization"""

# As the range of data in each column is pretty different, we need to standardize the data in a range so it would help our model

scaler = StandardScaler()

scaler.fit(X)

standardized_data = scaler.transform(X)
print(standardized_data)

"""Train and Test data

"""

X_train, X_test, Y_train, Y_test = train_test_split(standardized_data,Y, train_size=0.2,stratify= Y, random_state=2)
print(X_train.shape,X_test.shape)
print(Y_train.shape,Y_test.shape)

"""Training the model"""

classifier = svm.SVC(kernel='linear')

# training the support vector machine classifier
classifier.fit(X_train, Y_train)

"""Evaluate our model"""

# Accurancy score on train data
X_train_prediction = classifier.predict(X_train) # We store all the lables for this X_train
X_train_accurancy = accuracy_score(X_train_prediction, Y_train)
print(X_train_accurancy)

# Accurancy on the test data
X_test_prediction = classifier.predict(X_test)
X_test_accurancy = accuracy_score(X_test_prediction, Y_test)
print(X_test_accurancy)

"""Making a predict system"""

input_data = (8,183,64,0,0,23.3,0.672,32)

# Change this input data as np array

input_data_np_array = np.asarray(input_data)

input_data_np_array_reshaped = input_data_np_array.reshape(1,-1)

# Standardize the input data
std_data = scaler.transform(input_data_np_array_reshaped)

prediction = classifier.predict(std_data)

if(prediction[0] == 0):

  print("Not diabetic")

else:
  print("Diabetic")

